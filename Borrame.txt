
[r:Rails d:Drive f:Forks t:Trains l:Link u:Unlink esc:Quit]
r:Rails [<:Rot Left >:Rot Right ^:Forwd v:Backwd Shift+^:Rail Ctrl+^:Delete]
d:Drive [<:Prev >:Next ^:Accel v:Decel Space:Reverse (PgUp, PgDn, Ctrl+PgUp, Ctrl+PgDn):Move map] 
f:Forks [<:Prev >:Next Space:Toggle] 
t:Trains [A-Z:Locomotive a-z:Wagon Enter:End] 
l:Link [<:Back >:Forwd Space:Link] 
u:Unlink [<:Back >:Forwd ^:Add v:Del Space:Unlink] 

Also vim keys: < v ^ > -> h j k l

            case r:                model.setMode(TRACKS);
            case d:                model.setMode(LOCOMOTIVES);
            case f:                model.setMode(FORKS);
            //case F4:                model.setMode(LOAD_TRAINS);
            case t:                model.setMode(MAKE_TRAINS);
            case l:                model.setMode(LINK_TRAINS);
            case d:                model.setMode(DIVIDE_TRAINS);

            case LOCOMOTIVES:
                    case    ' '                            toggleReversed();
                    case ArrowUp:                        accelerateLocomotive();
                    case ArrowDown:                        decelerateLocomotive();
                    case ArrowLeft:                        selectPrevLocomotive();
                    case ArrowRight:                        selectNextLocomotive();
                    case PageUp:
                        if (keyEvent.isCtrlDown()) {
                            mapPageRight();
                        } else {
                            mapPageUp();
                        }
                    case PageDown:
                        if (keyEvent.isCtrlDown()) {
                            mapPageLeft();
                        } else {
                            mapPageDown();
                        }
            case FORKS:
                
                    case ArrowUp:                        toggleFork();
                    case ArrowDown:                        toggleFork();
                    case ArrowLeft:                        selectPrevFork();
                    case ArrowRight:                        selectNextFork();
            case LOAD_TRAINS:               
                    case ArrowUp:                        loadTrain();
                    case ArrowDown:                        // unloadTrain();
                    case ArrowLeft:                        selectPrevLoadPlatform();
                    case ArrowRight:                        selectNextLoadPlatform();
            case MAKE_TRAINS:
                matches("([A-Za-z])?")
                
            case LINK_TRAINS:
                    case ArrowUp:                        selectVehiclesInFront();
                    case ArrowDown:                        selectVehiclesAtBack();
                    case Character:
                    case ' ':                            linkOkUnlinkSelectedVehicles();
            case DIVIDE_TRAINS:
                    case ArrowLeft:                        selectFrontDivisionSense();
                    case ArrowRight:                        selectBackDivisionSense();
                    case ArrowUp:                        selectNextLink();
                    case ArrowDown:                        selectPrevLink();
                    case Character:
                    case ' ':                            divideTrain();
                    case Delete:                        destroyLinkers();

     