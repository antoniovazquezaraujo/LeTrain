package com.letrain.vehicle;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.letrain.dir.Dir;
import com.letrain.map.Point;
import com.letrain.map.RailMap;
import com.letrain.vehicle.Bulldozer;
import com.letrain.vehicle.Bulldozer.BulldozerMode;

public class RailPenTest {

	RailMap map;
	Bulldozer pen;
	@Before
	public void setUp() throws Exception {
		map = new RailMap();
		pen  = new Bulldozer(map, new Point(0,0));
	}

	@After
	public void tearDown() throws Exception {
		pen = null;
		map = null;
	}
 

	@Test
	public void testMove() {
		pen.setMode(BulldozerMode.PAINTING);
		pen.setPos(new Point(0,0));
		pen.setDir(Dir.N);
		pen.move(3);
		assertTrue(map.getRailAt(0, 0)!= null);
		assertTrue(map.getRailAt(-1, 0)!= null);
		assertTrue(map.getRailAt(-2, 0)!= null);
		assertTrue(map.getRailAt(-3, 0)== null);
		pen.setDir(Dir.E);
		pen.move(3);
		assertTrue(map.getRailAt(-3, 0)!= null);
		assertTrue(map.getRailAt(-3, 1)!= null);
		assertTrue(map.getRailAt(-3, 2)!= null);
		assertTrue(map.getRailAt(-3, 3)== null);
		
	}
	@Test
	public void testAddRail() {
		assertTrue(map.getRailAt(10, 10) == null);
		pen.addRail(new Point(10,10));
		assertTrue(map.getRailAt(10, 10) != null);
		pen.addRail(new Point(-10,10));
		assertTrue(map.getRailAt(-10, 10) != null);
	}


}
